name: CICD

on:
  # ✅ develop, main 모두에서 트리거
  push:
    branches: [ "develop", "main" ]
  pull_request:
    branches: [ "develop", "main" ]
  workflow_dispatch:

# 작업들
jobs:
  # -------------------------
  # 1) CI: 빌드/테스트 (모든 브랜치)
  # -------------------------
  build:
    name: Build & Test
    runs-on: ubuntu-latest  
    #defaults:
    #  run:
    #    working-directory: runddy

    steps:
      - name: (1) Checkout
        uses: actions/checkout@v4

      - name: (2) Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: gradle

      - name: (3) Grant execute permission for Gradle
        run: chmod +x ./gradlew      

      - name: (4) Build (skip Test)
        run: |
          # ./gradlew clean build --no-daemon #테스트 포함
          ./gradlew clean bootJar --no-daemon #실행 JAR만

      - name: (5) Upload JAR
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: |
            build/libs/*.jar

  # -------------------------
  # 2) 이미지 빌드 & GHCR 푸시 (main push만)
  # -------------------------
  docker-build-and-push:
    name: CD — Build & Push Docker Image (GHCR)
    needs: build
    runs-on: ubuntu-latest
    env:
      IMAGE: ghcr.io/${{ github.repository }}-backend
    # ✅ main 브랜치의 push에서만 실행 (develop/PR에서는 skip)
    #if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      
    steps:
      - name: (1) Checkout
        uses: actions/checkout@v4
        
      - name: (2) Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: (3) Build & Tag
        run: |
          SHORT_SHA=$(echo $GITHUB_SHA | head -c7)
          docker build -t $IMAGE:$SHORT_SHA -t $IMAGE:latest .

      - name: (4) Push
        run: |
          SHORT_SHA=$(echo $GITHUB_SHA | head -c7)
          docker push $IMAGE:$SHORT_SHA
          docker push $IMAGE:latest

  # -------------------------
  # 3) 배포 (main push만)
  # -------------------------
  deploy:
    name: CD - Deploy to EC2 (SSH -> docker compose)
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    # ✅ main 브랜치의 push에서만 배포
    #if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Deploy on EC2 via SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}         
          username: ${{ secrets.SSH_USER }}     
          key: ${{ secrets.SSH_KEY }}           
          script: |
            set -e
            cd ${{ secrets.EC2_APP_PATH }}       # ex) /opt/runddy
            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            docker compose pull
            docker compose up -d
            docker image prune -f

