name: CICD
#workflow를 재실행하는 트리거
on:
  #develop branch에 push가 발생하면 재실행
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ] # dev로 들어오는 PR에서 CI 실행

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# 작업들
jobs:
  #작업1 : 테스트코드 검사

  # 작업2 : 빌드
  build:
    name: Build & Test (develop)
    runs-on: ubuntu-latest  
    #defaults:
    #  run:
    #    working-directory: runddy

    steps:
      #(1)
      - name: Checkout
        uses: actions/checkout@v4

      #(2)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: gradle

      #(3)
      - name: Grant execute permission for Gradle
        run: chmod +x ./gradlew      

      #(4)
      - name: Build & Test
        run: |
          # ./gradlew clean build --no-daemon #테스트 포함
          ./gradlew clean bootJar --no-daemon #테스트를 건너뛰고 실행 JAR 만듦

      #(5)
      - name: Upload JAR
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: |
            build/libs/*.jar

 #작업3: 도커에 이미지
  docker-build-and-push:
    name: CD — Build & Push Docker Image (GHCR)
    needs: build
    runs-on: ubuntu-latest
    env:
      IMAGE: ghcr.io/${{ github.repository }}-backend
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build & Tag
        run: |
          SHORT_SHA=$(echo $GITHUB_SHA | head -c7)
          docker build -t $IMAGE:$SHORT_SHA -t $IMAGE:latest .

      - name: Push
        run: |
          SHORT_SHA=$(echo $GITHUB_SHA | head -c7)
          docker push $IMAGE:$SHORT_SHA
          docker push $IMAGE:latest

  #작업4) 배포
  deploy:
    name: CD - Deploy to EC2 (SSH -> docker compose)
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Deploy on EC2 via SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}          # ex) ec2-13-125-247-30.ap-northeast-2.compute.amazonaws.com
          username: ${{ secrets.SSH_USER }}      # ex) ec2-user
          key: ${{ secrets.SSH_KEY }}            # PEM 전체 내용
          script: |
            set -e
            cd ${{ secrets.EC2_APP_PATH }}       # ex) /opt/runddy
            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            docker compose pull
            docker compose up -d
            docker image prune -f

