name: CICD

on:
  # ✅ develop, main 모두에서 트리거
  push:
    branches: [ "develop", "main" ]
  pull_request:
    branches: [ "develop", "main" ]
  workflow_dispatch:

# 작업들
jobs:
  # -------------------------
  # 1) CI: 빌드/테스트 (모든 브랜치)
  # -------------------------
  build:
    name: Build & Test
    runs-on: ubuntu-latest  
    #defaults:
    #  run:
    #    working-directory: runddy

    steps:
      - name: (1) Checkout
        uses: actions/checkout@v4

      - name: (2) Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: gradle

      - name: (3) Grant execute permission for Gradle
        run: chmod +x ./gradlew      

      - name: (4) Build (skip Test)
        run: |
          # ./gradlew clean build --no-daemon #테스트 포함
          ./gradlew clean bootJar --no-daemon #실행 JAR만

      - name: (5) Upload JAR
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: |
            build/libs/*.jar
            

  # -------------------------
  # 2) 이미지 빌드 & GHCR 푸시 (main push만)
  # -------------------------
  docker-build-and-push:
    name: CD — Build & Push Docker Image (GHCR)
    needs: build
    runs-on: ubuntu-latest
    env:
      IMAGE: ghcr.io/${{ github.repository }}-backend #⬅️⬅️⬅️여기 좀 이상한데 ?
    
    # ✅ main 브랜치의 push에서만 실행 (develop/PR에서는 skip)
    #if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      
    steps:
      - name: (1) Checkout
        uses: actions/checkout@v4
        
      - name: (2) Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      # ✅ OWNER/REPO를 소문자로 만들어 IMAGE 변수로 출력
      - name: (3) Compute image name (lowercase) & short sha
        id: vars
        run: |
          OWNER_LC=$(echo "${GITHUB_REPOSITORY_OWNER}" | tr '[:upper:]' '[:lower:]')
          REPO_LC=$(echo "${GITHUB_REPOSITORY#*/}" | tr '[:upper:]' '[:lower:]')
          echo "IMAGE=ghcr.io/${OWNER_LC}/${REPO_LC}-backend" >> $GITHUB_OUTPUT
          echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Build & Tag
        run: |
          docker build \
            -t ${{ steps.vars.outputs.IMAGE }}:${{ steps.vars.outputs.SHORT_SHA }} \
            -t ${{ steps.vars.outputs.IMAGE }}:latest .

      - name: Push
        run: |
          docker push ${{ steps.vars.outputs.IMAGE }}:${{ steps.vars.outputs.SHORT_SHA }}
          docker push ${{ steps.vars.outputs.IMAGE }}:latest

  # -------------------------
  # 3) 배포 (main push만)
  # -------------------------
  deploy:
    name: CD - Deploy to EC2 (SSH -> docker compose)
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    
    # ✅ main 브랜치의 push에서만 배포
    #if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    env: 
      SPRING_PROFILES_ACTIVE: "prd"
      
      JWT_ISSUER: ${{ secrets.JWT_ISSUER }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      ACCESS_TTL: ${{ secrets.ACCESS_TTL }}
      REFRESH_TTL: ${{ secrets.REFRESH_TTL }}
      
      KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
      KAKAO_CLIENT_SECRET: ${{ secrets.KAKAO_CLIENT_SECRET }}
      
      NAVER_CLIENT_ID: ${{ secrets.NAVER_CLIENT_ID }}
      NAVER_CLIENT_SECRET: ${{ secrets.NAVER_CLIENT_SECRET }}
      
      DB_URL: ${{ secrets.DB_URL }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASS: ${{ secrets.DB_PASS }}

      REDIRECT_URI: ${{ secrets.REDIRECT_URI }}
      IMAGE: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-backend:latest
  
    steps:
      - name: 1) EC2 접속 & 기본 준비 (경로/로그인)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -euo pipefail
            APP_PATH="${{ secrets.EC2_APP_PATH }}"
            mkdir -p "$APP_PATH/config"
            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
  
      - name: 2) YML 생성 — application.yml
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            APP_PATH="${{ secrets.EC2_APP_PATH }}"
            cat > "$APP_PATH/config/application.yml" <<'YAML'
            spring:
              application:
                name: Server
              profiles:
                include:
                  - jwt
                  - oauth
            YAML
  
      - name: 3) YML 생성 — application-jwt.yml
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            APP_PATH="${{ secrets.EC2_APP_PATH }}"
            cat > "$APP_PATH/config/application-jwt.yml" <<'YAML'
            jwt:
              issuer: ${JWT_ISSUER}
              secret: ${JWT_SECRET}
              access-token-seconds: ${ACCESS_TTL}
              refresh-token-seconds: ${REFRESH_TTL}
            YAML
  
      - name: 4) YML 생성 — application-oauth.yml
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            APP_PATH="${{ secrets.EC2_APP_PATH }}"
            cat > "$APP_PATH/config/application-oauth.yml" <<'YAML'
            spring:
              security:
                oauth2:
                  client:
                    registration:
                      kakao:
                        client-id: ${KAKAO_CLIENT_ID}
                        client-secret: ${KAKAO_CLIENT_SECRET}
                        client-authentication-method: client_secret_post
                        authorization-grant-type: authorization_code
                        redirect-uri: ${REDIRECT_URI}
                        scope: [ profile_nickname, account_email ]
                      naver:
                        client-id: ${NAVER_CLIENT_ID}
                        client-secret: ${NAVER_CLIENT_SECRET}
                        client-authentication-method: client_secret_post
                        authorization-grant-type: authorization_code
                        redirect-uri: ${REDIRECT_URI}
                        scope: [ name, email ]
                        provider: naver
                  provider:
                    kakao:
                      authorization-uri: https://kauth.kakao.com/oauth/authorize
                      token-uri: https://kauth.kakao.com/oauth/token
                      user-info-uri: https://kapi.kakao.com/v2/user/me
                      user-info-authentication-method: header
                      user-name-attribute: id
                    naver:
                      authorization-uri: https://nid.naver.com/oauth2.0/authorize
                      token-uri: https://nid.naver.com/oauth2.0/token
                      user-info-uri: https://openapi.naver.com/v1/nid/me
                      user-name-attribute: response
            YAML
  
      - name: 5) YML 생성 — application-dev.yml / application-prd.yml
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            APP_PATH="${{ secrets.EC2_APP_PATH }}"
            cat > "$APP_PATH/config/application-dev.yml" <<'YAML'
            spring:
              datasource:
                url: ${DB_URL}
                username: ${DB_USER}
                password: ${DB_PASS}
                driver-class-name: com.mysql.cj.jdbc.Driver
            YAML
  
            cat > "$APP_PATH/config/application-prd.yml" <<'YAML'
            spring:
              datasource:
                url: ${DB_URL}
                username: ${DB_USER}
                password: ${DB_PASS}
                driver-class-name: com.mysql.cj.jdbc.Driver
            YAML
  
      - name: 6) 환경별 redirect-uri 변수 치환(envsubst)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e
            APP_PATH="${{ secrets.EC2_APP_PATH }}"
            if [ "${SPRING_PROFILES_ACTIVE}" = "prd" ]; then
              export REDIRECT_URI="${PRD_REDIRECT_URI}"
            else
              export REDIRECT_URI="${DEV_REDIRECT_URI}"
            fi
            for f in application-oauth.yml application-jwt.yml application-dev.yml application-prd.yml; do
              envsubst < "$APP_PATH/config/$f" > "$APP_PATH/config/$f.tmp" && mv "$APP_PATH/config/$f.tmp" "$APP_PATH/config/$f"
            done
  
      - name: 7) 배포 — docker compose pull/up & prune
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -euo pipefail
            APP_PATH="${{ secrets.EC2_APP_PATH }}"
            cd "$APP_PATH"
            export SPRING_PROFILES_ACTIVE="${SPRING_PROFILES_ACTIVE}"
            docker compose pull
            docker compose up -d
            docker image prune -f
